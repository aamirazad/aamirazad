name: Merge Bot

on:
  issue_comment:
    types: [created]

jobs:
  check-permissions:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/merge')
    runs-on: ubuntu-latest
    outputs:
      allowed: ${{ steps.permission_check.outputs.allowed }}
      commenter: ${{ steps.set_info.outputs.commenter }}
      pr_number: ${{ steps.set_info.outputs.pr_number }}
    steps:
      - name: Set commenter info
        id: set_info
        run: |
          echo "commenter=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Check permissions
        id: check_permissions
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.comment.user.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_PAT }}

      - name: Verify maintainer permission
        id: permission_check
        run: |
          PERMISSION=$(jq -r .permission <<< '${{ steps.check_permissions.outputs.data }}')
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "write" ]]; then
            echo "allowed=true" >> $GITHUB_OUTPUT
          else
            echo "allowed=false" >> $GITHUB_OUTPUT
          fi

  notify-permission-denied:
    needs: check-permissions
    if: needs.check-permissions.outputs.allowed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Comment permission denied
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.check-permissions.outputs.pr_number }}
          body: "üîí Sorry @${{ needs.check-permissions.outputs.commenter }}, only repository maintainers can use the `/merge` command."

  validate-pr:
    needs: check-permissions
    if: needs.check-permissions.outputs.allowed == 'true'
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.pr.outputs.branch }}
      base_branch: ${{ steps.pr.outputs.base_branch }}
      title: ${{ steps.pr.outputs.title }}
      author: ${{ steps.pr.outputs.author }}
      is_up_to_date: ${{ steps.up_to_date.outputs.result }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.MERGE_PAT }}

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MERGE_PAT }}
          script: |
            const { data } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-permissions.outputs.pr_number }}
            });

            core.setOutput('branch', data.head.ref);
            core.setOutput('base_branch', data.base.ref);
            core.setOutput('title', data.title);
            core.setOutput('author', data.user.login);

      - name: Fetch all branches
        run: git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Check if PR is up to date
        id: up_to_date
        run: |
          git checkout ${{ steps.pr.outputs.branch }}
          git fetch origin ${{ steps.pr.outputs.base_branch }}
          if git merge-base --is-ancestor origin/${{ steps.pr.outputs.base_branch }} ${{ steps.pr.outputs.branch }}; then
            echo "result=up_to_date" >> $GITHUB_OUTPUT
          else
            echo "result=outdated" >> $GITHUB_OUTPUT
          fi

  notify-outdated:
    needs: [check-permissions, validate-pr]
    if: needs.validate-pr.outputs.is_up_to_date == 'outdated'
    runs-on: ubuntu-latest
    steps:
      - name: Comment if outdated
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.check-permissions.outputs.pr_number }}
          body: "‚ö†Ô∏è Cannot fast-forward merge because `${{ needs.validate-pr.outputs.branch }}` is not up to date with `${{ needs.validate-pr.outputs.base_branch }}`. Please rebase first."

  merge-pr:
    needs: [check-permissions, validate-pr]
    if: needs.validate-pr.outputs.is_up_to_date == 'up_to_date'
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.merge.outputs.success }}
      error_type: ${{ steps.merge.outputs.error_type }}
      prev_sha: ${{ steps.merge.outputs.prev_sha }}
      new_sha: ${{ steps.merge.outputs.new_sha }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.MERGE_PAT }}

      - name: Fetch all branches
        run: git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Fast-forward merge into base
        id: merge
        run: |
          git checkout ${{ needs.validate-pr.outputs.base_branch }}
          PREV_SHA=$(git rev-parse HEAD)
          echo "prev_sha=$PREV_SHA" >> $GITHUB_OUTPUT

          if git merge --ff-only ${{ needs.validate-pr.outputs.branch }}; then
            NEW_SHA=$(git rev-parse HEAD)
            echo "new_sha=$NEW_SHA" >> $GITHUB_OUTPUT
            
            if git push origin ${{ needs.validate-pr.outputs.base_branch }}; then
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "success=false" >> $GITHUB_OUTPUT
              echo "error_type=push_failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error_type=merge_failed" >> $GITHUB_OUTPUT
          fi

  notify-merge-failure:
    needs: [check-permissions, validate-pr, merge-pr]
    if: needs.merge-pr.outputs.success == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Comment merge failure
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.check-permissions.outputs.pr_number }}
          body: |
            ‚ùå Merge failed.

            ${{ needs.merge-pr.outputs.error_type == 'push_failed' && '**Push rejected**: This is likely due to repository rules (e.g., no merge commits allowed). The merge was successful locally but could not be pushed to the remote repository.' || '**Fast-forward merge failed**: This usually means there are conflicts or the branch cannot be fast-forwarded. Please check the branch status and try rebasing.' }}

            _@${{ needs.check-permissions.outputs.commenter }}_

  update-changelog:
    needs: [check-permissions, validate-pr, merge-pr]
    if: needs.merge-pr.outputs.success == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.MERGE_PAT }}

      - name: Update CHANGELOG.md
        run: |
          declare -A TYPE_MAP=(
            ["build"]="Build"
            ["ci"]="CI"
            ["docs"]="Documentation"
            ["feat"]="Feature"
            ["fix"]="Fix"
            ["perf"]="Performance"
            ["refactor"]="Refactor"
            ["style"]="Style"
            ["test"]="Test"
          )

          PR_TITLE="${{ needs.validate-pr.outputs.title }}"
          PR_AUTHOR="${{ needs.validate-pr.outputs.author }}"
          PR_NUMBER="${{ needs.check-permissions.outputs.pr_number }}"
          PREV_SHA="${{ needs.merge-pr.outputs.prev_sha }}"
          NEW_SHA="${{ needs.merge-pr.outputs.new_sha }}"
          COMMENTER="${{ needs.check-permissions.outputs.commenter }}"

          TYPE=$(echo "$PR_TITLE" | sed -E 's/^([a-z]+)(\([^\)]*\))?:.*/\1/')
          SCOPE=$(echo "$PR_TITLE" | sed -nE 's/^[a-z]+\(([^)]*)\):.*/\1/p')
          DESCRIPTION=$(echo "$PR_TITLE" | sed -E 's/^[a-z]+(\([^\)]*\))?:\s*(.*)/\2/')
          TYPE_HUMAN="${TYPE_MAP[$TYPE]}"

          if [[ -n "$TYPE_HUMAN" ]]; then
            if [[ -n "$SCOPE" ]]; then
              PREFIX="**${TYPE_HUMAN}**(${SCOPE})"
            else
              PREFIX="**${TYPE_HUMAN}**"
            fi
          else
            PREFIX="**Other**"
          fi

          SHORT_PREV=$(echo $PREV_SHA | cut -c1-7)
          SHORT_NEW=$(echo $NEW_SHA | cut -c1-7)
          COMPARE_URL="https://github.com/${{ github.repository }}/compare/$SHORT_PREV...$SHORT_NEW"

          ENTRY="- ${PREFIX}: ${DESCRIPTION} ([#${PR_NUMBER}](https://github.com/${{ github.repository }}/pull/${PR_NUMBER})) by [@${PR_AUTHOR}](https://github.com/${PR_AUTHOR}) - [\`${SHORT_PREV}...${SHORT_NEW}\`]($COMPARE_URL)"

          if ! grep -q '^## Unreleased Features' CHANGELOG.md; then
            cat <<EOF > tmp_changelog.md
          ## Unreleased Features

          <details>
          <summary>All commits</summary>

          $ENTRY

          </details>

          EOF
            cat CHANGELOG.md >> tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.md
          else
            awk -v entry="$ENTRY" 'BEGIN{done=0; after_summary=0}
            {
              if(!done && /<summary>All commits<\/summary>/){
                print
                after_summary=1
                next
              }
              if(after_summary && !done && /^$/) {
                print
                print entry
                done=1
                next
              }
              print
            }' CHANGELOG.md > tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.md
          fi

          git config user.name "${COMMENTER}"
          git config user.email "${COMMENTER}@users.noreply.github.com"

          git add CHANGELOG.md
          git commit --author "${PR_AUTHOR} <${PR_AUTHOR}@users.noreply.github.com>" -m "chore(docs): update changelog for #${PR_NUMBER}"
          git push origin ${{ needs.validate-pr.outputs.base_branch }}

  notify-success:
    needs: [check-permissions, validate-pr, merge-pr, update-changelog]
    if: needs.merge-pr.outputs.success == 'true' && !failure() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Comment success
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.check-permissions.outputs.pr_number }}
          body: |
            üéâ Successfully fast-forward merged `${{ needs.validate-pr.outputs.branch }}` into `${{ needs.validate-pr.outputs.base_branch }}`.
            - Compare: https://github.com/${{ github.repository }}/compare/${{ needs.merge-pr.outputs.prev_sha }}...${{ needs.merge-pr.outputs.new_sha }}
