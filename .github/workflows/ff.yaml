name: Merge Bot

on:
  issue_comment:
    types: [created]

jobs:
  fast-forward-merge:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '/merge')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Get PR details
        id: pr
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Extract info
        run: |
          echo "PR_BRANCH=$(jq -r .head.ref <<< '${{ steps.pr.outputs.data }}')" >> $GITHUB_ENV
          echo "BASE_BRANCH=$(jq -r .base.ref <<< '${{ steps.pr.outputs.data }}')" >> $GITHUB_ENV
          echo "PR_TITLE=$(jq -r .title <<< '${{ steps.pr.outputs.data }}')" >> $GITHUB_ENV
          echo "PR_AUTHOR=$(jq -r .user.login <<< '${{ steps.pr.outputs.data }}')" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV

      - name: Fetch all branches
        run: git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Check if PR is up to date
        id: up_to_date
        run: |
          git checkout $PR_BRANCH
          git fetch origin $BASE_BRANCH
          if git merge-base --is-ancestor origin/$BASE_BRANCH $PR_BRANCH; then
            echo "result=up_to_date" >> $GITHUB_OUTPUT
          else
            echo "result=outdated" >> $GITHUB_OUTPUT
          fi

      - name: Comment if outdated
        if: steps.up_to_date.outputs.result == 'outdated'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: "⚠️ Cannot fast-forward merge because `${{ env.PR_BRANCH }}` is not up to date with `${{ env.BASE_BRANCH }}`. Please rebase first."

      - name: Fast-forward merge into base
        if: steps.up_to_date.outputs.result == 'up_to_date'
        run: |
          git checkout $BASE_BRANCH
          PREV_SHA=$(git rev-parse HEAD)
          echo "PREV_SHA=$PREV_SHA" >> $GITHUB_ENV
          git merge --ff-only $PR_BRANCH
          NEW_SHA=$(git rev-parse HEAD)
          echo "NEW_SHA=$NEW_SHA" >> $GITHUB_ENV
          git push origin $BASE_BRANCH

      - name: Update CHANGELOG.md
        if: steps.up_to_date.outputs.result == 'up_to_date'
        run: |
          SHORT_PREV=$(echo $PREV_SHA | cut -c1-7)
          SHORT_NEW=$(echo $NEW_SHA | cut -c1-7)
          COMPARE_URL="https://github.com/${{ github.repository }}/compare/$SHORT_PREV...$SHORT_NEW"
          ENTRY="- ${PR_TITLE} by [@${PR_AUTHOR}](https://github.com/${PR_AUTHOR}) for https://github.com/${{ github.repository }}/pull/${PR_NUMBER} ([\`$SHORT_PREV...$SHORT_NEW\`]($COMPARE_URL))"

          # If no "Unreleased Features" section, prepend it with details block
          if ! grep -q '^## Unreleased Features' CHANGELOG.md; then
            cat <<EOF > tmp_changelog.md
          ## Unreleased Features

          <details>
          <summary>All commits</summary>

          $ENTRY

          </details>

          EOF
            cat CHANGELOG.md >> tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.md
          else
            # Insert the new entry immediately after the summary
            awk -v entry="$ENTRY" 'BEGIN{done=0}
            {
              print
              if(!done && /<summary>All commits<\/summary>/){
                print ""
                print entry "\n"
                done=1
              }
            }' CHANGELOG.md > tmp_changelog.md
            mv tmp_changelog.md CHANGELOG.md
          fi

          # Use the comment author as committer
          git config user.name "${{ github.event.comment.user.login }}"
          git config user.email "${{ github.event.comment.user.login }}@users.noreply.github.com"

          git add CHANGELOG.md
          git commit --author "${PR_AUTHOR} <${PR_AUTHOR}@users.noreply.github.com>" -m "chore: merge ${PR_TITLE} (#${PR_NUMBER})"
          git push origin $BASE_BRANCH

      - name: Comment success
        if: steps.up_to_date.outputs.result == 'up_to_date'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            🎉 Successfully fast-forward merged `${{ env.PR_BRANCH }}` into `${{ env.BASE_BRANCH }}`.
            - Compare: https://github.com/${{ github.repository }}/compare/${{ env.PREV_SHA }}...${{ env.NEW_SHA }}